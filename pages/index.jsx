import { Modal } from '@mui/material';
import Head from 'next/head';
import { useEffect, useState } from 'react';
import styles from '../styles/Home.module.scss';
import connectMongoose from '../utils/connectMongo';
import AddNoteFab from './components/AddNoteFab';
import NotesWrapper from './components/NotesWrapper';
import TopBar from './components/TopBar';
import PopUpModal from './PopUpModal';
import Note from '../models/Note';
import PrevIcon from '../pages/components/PrevIcon';
import NextIcon from '../pages/components/NextIcon';

export const NOTES_PER_PAGE = 6;

const Home = ({
  serverSideCount,
  serverSidePageCount,
  serverSidePinnedNotes,
  serverSideNormalNotes,
}) => {
  console.log(serverSideCount, serverSidePageCount);
  const [pinnedNotes, setPinnedNotes] = useState(
    JSON.parse(serverSidePinnedNotes)
  );
  const [normalNotes, setNormalNotes] = useState(
    JSON.parse(serverSideNormalNotes)
  );
  const [page, setPage] = useState(1);
  const [pageCount, setPageCount] = useState(serverSidePageCount);
  const [count, setCount] = useState(serverSideCount);
  const [editable, setEditable] = useState(false);

  // pop-up modal state
  const [_id, _setId] = useState('');
  const [open, setOpen] = useState(false);
  const [title, setTitle] = useState('');
  const [tagline, setTagline] = useState('');
  const [body, setBody] = useState('');
  const [pinned, setPinned] = useState(false);
  //used as handle for fab button
  const handleOpenNewNote = () => {
    setTitle('');
    setTagline('');
    setBody('');
    setPinned(false);
    setEditable(false);
    setOpen(true);
  };

  // handler when clicked on note
  const handleOpenNote = (note) => {
    setTitle(note.title);
    setTagline(note.tagline);
    setBody(note.body);
    setPinned(note.pinned);
    _setId(note._id);
    setEditable(true);
    setOpen(true);
  };

  const handleClose = () => setOpen(false);

  const handleNextPageClick = () => {};

  const handlePrevPageClick = () => {};

  return (
    <div className={styles.container}>
      <Head>
        <title>Keep Your Notes</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <main>
        <TopBar />
        <AddNoteFab createNote={handleOpenNewNote} />
        {pinnedNotes && pinnedNotes.length > 0 && (
          <NotesWrapper
            title='Pinned Notes'
            notes={pinnedNotes}
            handleOpenNote={handleOpenNote}
          />
        )}
        {normalNotes && normalNotes.length > 0 && (
          <div
            style={{
              display: 'flex',
              flexDirection: 'column',
              alignItems: 'center',
              padding: 20,
            }}
          >
            <NotesWrapper
              title='Notes'
              notes={normalNotes}
              handleOpenNote={handleOpenNote}
            />
            <div>
              <span title='go to prev page' onClick={handlePrevPageClick}>
                <PrevIcon />
              </span>
              <span title='go to next page' onClick={handleNextPageClick}>
                <NextIcon />
              </span>
            </div>
          </div>
        )}
        <Modal open={open} onClose={handleClose}>
          <PopUpModal
            title={title}
            setTitle={setTitle}
            tagline={tagline}
            setTagline={setTagline}
            body={body}
            setBody={setBody}
            editable={editable}
            pinned={pinned}
            setPinned={setPinned}
            _id={_id}
            setPinnedNotes={setPinnedNotes}
            setOpen={setOpen}
            setNormalNotes={setNormalNotes}
          />
        </Modal>
      </main>
    </div>
  );
};

export async function getServerSideProps() {
  await connectMongoose();
  const pinnedNotes = await Note.find({ pinned: true });
  const normalNotes = await Note.find({ pinned: false }).limit(NOTES_PER_PAGE);
  const count = normalNotes.length;
  const pageCount = Math.ceil(count / NOTES_PER_PAGE);
  return {
    props: {
      serverSidePinnedNotes: JSON.stringify(pinnedNotes),
      serverSideNormalNotes: JSON.stringify(normalNotes),
      serverSideCount: count,
      serverSidePageCount: pageCount,
    },
  };
}

export default Home;
